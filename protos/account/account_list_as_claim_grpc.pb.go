// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: account/account_list_as_claim.proto

package account

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountListServiceClient is the client API for AccountListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountListServiceClient interface {
	ListAsClaim(ctx context.Context, in *AccountListAsClaimRequest, opts ...grpc.CallOption) (*AccountListAsClaimResult, error)
}

type accountListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountListServiceClient(cc grpc.ClientConnInterface) AccountListServiceClient {
	return &accountListServiceClient{cc}
}

func (c *accountListServiceClient) ListAsClaim(ctx context.Context, in *AccountListAsClaimRequest, opts ...grpc.CallOption) (*AccountListAsClaimResult, error) {
	out := new(AccountListAsClaimResult)
	err := c.cc.Invoke(ctx, "/account.AccountListService/ListAsClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountListServiceServer is the server API for AccountListService service.
// All implementations must embed UnimplementedAccountListServiceServer
// for forward compatibility
type AccountListServiceServer interface {
	ListAsClaim(context.Context, *AccountListAsClaimRequest) (*AccountListAsClaimResult, error)
	mustEmbedUnimplementedAccountListServiceServer()
}

// UnimplementedAccountListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountListServiceServer struct {
}

func (UnimplementedAccountListServiceServer) ListAsClaim(context.Context, *AccountListAsClaimRequest) (*AccountListAsClaimResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAsClaim not implemented")
}
func (UnimplementedAccountListServiceServer) mustEmbedUnimplementedAccountListServiceServer() {}

// UnsafeAccountListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountListServiceServer will
// result in compilation errors.
type UnsafeAccountListServiceServer interface {
	mustEmbedUnimplementedAccountListServiceServer()
}

func RegisterAccountListServiceServer(s grpc.ServiceRegistrar, srv AccountListServiceServer) {
	s.RegisterService(&AccountListService_ServiceDesc, srv)
}

func _AccountListService_ListAsClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountListAsClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountListServiceServer).ListAsClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountListService/ListAsClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountListServiceServer).ListAsClaim(ctx, req.(*AccountListAsClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountListService_ServiceDesc is the grpc.ServiceDesc for AccountListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.AccountListService",
	HandlerType: (*AccountListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAsClaim",
			Handler:    _AccountListService_ListAsClaim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account/account_list_as_claim.proto",
}